import Head from "next/head";
import { IAnime } from "types/anime";
import { getAnimes } from "pages/api/animes";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import {
  createColumnHelper,
  useReactTable,
  getCoreRowModel,
  flexRender,
} from "@tanstack/react-table";
import statusCollection from "constants/statusCollection";
import Rating from "components/Rating";
import Progress from "components/Progress";
import { useState } from "react";

const columnHelper = createColumnHelper<IAnime>();

const columns = [
  columnHelper.accessor((row) => `${row.name} / ${row.russian}`, {
    id: "name",
    cell: (cell) => <b>{cell.getValue()}</b>,
    header: () => <span>Name</span>,
    minSize: 350,
  }),
  columnHelper.accessor((row) => statusCollection[row.status], {
    id: "status",
    cell: (cell) => cell.getValue(),
    header: () => <span>Status</span>,
  }),
  columnHelper.accessor((row) => row.rating, {
    id: "rating",
    cell: (cell) => {
      const cellRating = cell.getValue();
      const rating = cellRating ? cellRating / 2 : null;

      return (
        <div className="flex justify-start whitespace-nowrap">
          {rating ? (
            <Rating value={rating} readonly label={`(${rating})`} />
          ) : (
            "n/a"
          )}
        </div>
      );
    },
    header: () => <span>Rating</span>,
  }),
  columnHelper.accessor((row) => [row.episodes_watch, row.episodes], {
    id: "progress",
    cell: (cell) => {
      const [episodesWatch, episodes] = cell.getValue();
      return episodesWatch ? (
        <Progress
          progress={(episodesWatch / episodes!) * 100}
          label={`${episodesWatch}/${episodes}`}
          size={80}
          strokeWidth={8}
        />
      ) : (
        "n/a"
      );
    },
    header: () => <span>Progress</span>,
  }),
  columnHelper.accessor((row) => row.comment, {
    id: "comment",
    cell: (cell) => <span>{cell.getValue()}</span>,
    header: () => <span>Comment</span>,
    minSize: 400,
  }),
];

const Home = ({
  data: defaultAnimes,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [animes, setAnimes] = useState<IAnime[]>(defaultAnimes);

  const table = useReactTable({
    data: animes,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen">
        <table className="min-w-max text-sm text-left text-gray-500">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th
                    key={header.id}
                    className="py-3 px-6"
                    style={{
                      width: header.getSize(),
                    }}
                  >
                    {flexRender(
                      header.column.columnDef.header,
                      header.getContext()
                    )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id} className="bg-white border-b">
                {row.getVisibleCells().map((cell) => (
                  <td
                    key={cell.id}
                    className="py-4 px-6"
                    style={{ width: cell.column.getSize() }}
                  >
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </main>
      <footer></footer>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps<{
  data: IAnime[];
}> = async (context) => {
  let animes: IAnime[] = [];

  try {
    animes = JSON.parse(JSON.stringify(await getAnimes()));
  } catch (error) {}

  return {
    props: {
      data: animes,
    },
  };
};

export default Home;
