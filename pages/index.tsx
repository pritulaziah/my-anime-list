import Head from "next/head";
import { IAnime, Statuses } from "types/anime";
import {
  createColumnHelper,
  useReactTable,
  getCoreRowModel,
  flexRender,
} from "@tanstack/react-table";
import statusCollection from "constants/statusCollection";
import Rating from "components/Rating";
import Progress from "components/Progress";

const animes: IAnime[] = [
  {
    id: 47194,
    name: "Summertime Render",
    russian: "Летнее время",
    status: Statuses.InProgress,
    rating: null,
    episodes: 25,
    episodes_watch: 11,
  },
  {
    id: 30015,
    name: "ReLIFE",
    russian: "Повторная жизнь",
    status: Statuses.Done,
    rating: 9.5,
    episodes: 13,
    episodes_watch: 13,
  },
];

const columnHelper = createColumnHelper<IAnime>();

const columns = [
  columnHelper.accessor((row) => `${row.name} / ${row.russian}`, {
    id: "name",
    cell: (cell) => <b>{cell.getValue()}</b>,
    header: () => <span>Name</span>,
  }),
  columnHelper.accessor((row) => statusCollection[row.status], {
    id: "status",
    cell: (cell) => cell.getValue(),
    header: () => <span>Status</span>,
  }),
  columnHelper.accessor((row) => row.rating, {
    id: "rating",
    cell: (cell) => {
      const rating = cell.getValue();
      return (
        <div className="flex justify-start">
          {rating ? <Rating value={rating / 2} readonly /> : "n/a"}
        </div>
      );
    },
    header: () => <span>Rating</span>,
  }),
  columnHelper.accessor((row) => [row.episodes_watch, row.episodes], {
    id: "progress",
    cell: (cell) => {
      const [episodesWatch, episodes] = cell.getValue();
      return episodesWatch ? (
        <Progress
          progress={(episodesWatch / episodes!) * 100}
          label={`${episodesWatch}/${episodes}`}
          size={80}
          strokeWidth={8}
        />
      ) : (
        "n/a"
      );
    },
    header: () => <span>Progress</span>,
  }),
];

const Home = () => {
  const table = useReactTable({
    data: animes,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen flex justify-center items-center">
        <table className="max-w-4xl w-full text-sm text-left text-gray-500">
          <thead className="text-xs text-gray-700 uppercase bg-gray-50">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th key={header.id} className="py-3 px-6">
                    {flexRender(
                      header.column.columnDef.header,
                      header.getContext()
                    )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id} className="bg-white border-b">
                {row.getVisibleCells().map((cell) => (
                  <td key={cell.id} className="py-4 px-6">
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </main>
      <footer></footer>
    </div>
  );
};

export default Home;
